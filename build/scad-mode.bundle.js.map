{"version":3,"sources":["webpack:///scad-mode.bundle.js","webpack:///./node_modules/brace/mode/scad.js"],"names":["webpackJsonpTexteditor","./node_modules/brace/mode/scad.js","module","exports","ace","define","acequire","oop","TextHighlightRules","DocCommentHighlightRules","this","$rules","start","token","regex","getTagRule","defaultToken","caseInsensitive","inherits","getStartRule","next","getEndRule","scadHighlightRules","keywordMapper","createKeywordMapper","variable.language","keyword","constant.language","comment","qqstring","qstring","embedRules","Range","MatchingBraceOutdent","checkOutdent","line","input","test","autoOutdent","doc","row","getLine","match","column","length","openBracePos","findMatchingBracket","indent","$getIndent","replace","call","prototype","BaseFoldMode","FoldMode","commentRegex","foldingStartMarker","RegExp","source","foldingStopMarker","end","singleLineBlockCommentRe","tripleStarBlockCommentRe","startRegionRe","_getFoldWidgetBase","getFoldWidget","session","foldStyle","fw","getFoldWidgetRange","forceMultiline","getCommentRegionBlock","i","index","openingBracketBlock","range","getCommentFoldRange","isMultiLine","getSectionRange","closingBracketBlock","startIndent","search","startRow","startColumn","endRow","maxRow","getLength","subRange","re","depth","m","exec","TextMode","Mode","CstyleBehaviour","CStyleFoldMode","HighlightRules","$outdent","$behaviour","foldingRules","lineCommentStart","blockComment","getNextLineIndent","state","tab","tokenizedLine","getTokenizer","getLineTokens","tokens","endState","type","$id"],"mappings":"AAAAA,wBAAwB,KAElBC,oCACA,SAAUC,EAAQC,GCHxBC,IAAAC,OAAA,6HAAAC,EAAAH,EAAAD,GACA,YAEA,IAAAK,GAAAD,EAAA,cACAE,EAAAF,EAAA,0BAAAE,mBAEAC,EAAA,WACAC,KAAAC,QACAC,QACAC,MAAA,kBACAC,MAAA,eAEAL,EAAAM,cAEAC,aAAA,cACAC,iBAAA,KAKAV,GAAAW,SAAAT,EAAAD,GAEAC,EAAAM,WAAA,SAAAH,GACA,OACAC,MAAA,+BACAC,MAAA,kCAIAL,EAAAU,aAAA,SAAAP,GACA,OACAC,MAAA,cACAC,MAAA,gBACAM,KAAAR,IAIAH,EAAAY,WAAA,SAAAT,GACA,OACAC,MAAA,cACAC,MAAA,SACAM,KAAAR,IAKAT,EAAAM,6BAIAL,IAAAC,OAAA,4KAAAC,EAAAH,EAAAD,GACA,YAEA,IAAAK,GAAAD,EAAA,cAEAG,GADAH,EAAA,eACAA,EAAA,iCAAAG,0BACAD,EAAAF,EAAA,0BAAAE,mBAEAc,EAAA,WACA,GAAAC,GAAAb,KAAAc,qBACAC,oBAAA,OACAC,QAAA,qBACAC,oBAAA,QACK,aAELjB,MAAAC,QACAC,QAEAC,MAAA,UACAC,MAAA,aAEAL,EAAAU,aAAA,UAEAN,MAAA,UACAC,MAAA,SACAM,KAAA,YAEAP,MAAA,SACAC,MAAA,uCAEAD,MAAA,SACAC,MAAA,aACAM,KAAA,aAEAP,MAAA,SACAC,MAAA,uCAEAD,MAAA,SACAC,MAAA,aACAM,KAAA,YAEAP,MAAA,mBACAC,MAAA,yBAEAD,MAAA,mBACAC,MAAA,oDAEAD,MAAA,WACAC,MAAA,oBAEAD,MAAA,UACAC,MAAA,oBAEAD,MAAAU,EACAT,MAAA,gCAEAD,MAAA,mBACAC,MAAA,0JAEAD,MAAA,eACAC,MAAA,UAEAD,MAAA,eACAC,MAAA,YAEAD,MAAA,OACAC,MAAA,SAGAc,UAEAf,MAAA,UACAC,MAAA,YACAM,KAAA,UAEAP,MAAA,UACAC,MAAA,OAGAe,WAEAhB,MAAA,SACAC,MAAA,gCACAM,KAAA,UAEAP,MAAA,SACAC,MAAA,OAGAgB,UAEAjB,MAAA,SACAC,MAAA,gCACAM,KAAA,UAEAP,MAAA,SACAC,MAAA,QAKAJ,KAAAqB,WAAAtB,EAAA,QACAA,EAAAY,WAAA,WAGAd,GAAAW,SAAAI,EAAAd,GAEAL,EAAAmB,uBAGAlB,IAAAC,OAAA,sFAAAC,EAAAH,EAAAD,GACA,YAEA,IAAA8B,GAAA1B,EAAA,YAAA0B,MAEAC,EAAA,cAEA,WAEAvB,KAAAwB,aAAA,SAAAC,EAAAC,GACA,gBAAAC,KAAAF,IAGA,SAAsBE,KAAAD,IAGtB1B,KAAA4B,YAAA,SAAAC,EAAAC,GACA,GAAAL,GAAAI,EAAAE,QAAAD,GACAE,EAAAP,EAAAO,MAAA,WAEA,KAAAA,EAAA,QAEA,IAAAC,GAAAD,EAAA,GAAAE,OACAC,EAAAN,EAAAO,qBAAoDN,MAAAG,UAEpD,KAAAE,KAAAL,OAAA,QAEA,IAAAO,GAAArC,KAAAsC,WAAAT,EAAAE,QAAAI,EAAAL,KACAD,GAAAU,QAAA,GAAAjB,GAAAQ,EAAA,EAAAA,EAAAG,EAAA,GAAAI,IAGArC,KAAAsC,WAAA,SAAAb,GACA,MAAAA,GAAAO,MAAA,cAGCQ,KAAAjB,EAAAkB,WAEDhD,EAAA8B,yBAGA7B,IAAAC,OAAA,yHAAAC,EAAAH,EAAAD,GACA,YAEA,IAAAK,GAAAD,EAAA,iBACA0B,EAAA1B,EAAA,eAAA0B,MACAoB,EAAA9C,EAAA,eAAA+C,SAEAA,EAAAlD,EAAAkD,SAAA,SAAAC,GACAA,IACA5C,KAAA6C,mBAAA,GAAAC,QACA9C,KAAA6C,mBAAAE,OAAAR,QAAA,gBAAAK,EAAA1C,QAEAF,KAAAgD,kBAAA,GAAAF,QACA9C,KAAAgD,kBAAAD,OAAAR,QAAA,gBAAAK,EAAAK,OAIApD,GAAAW,SAAAmC,EAAAD,GAEA,WAEA1C,KAAA6C,mBAAA,8BACA7C,KAAAgD,kBAAA,kCACAhD,KAAAkD,yBAAA,uBACAlD,KAAAmD,yBAAA,2BACAnD,KAAAoD,cAAA,4BACApD,KAAAqD,mBAAArD,KAAAsD,cACAtD,KAAAsD,cAAA,SAAAC,EAAAC,EAAA1B,GACA,GAAAL,GAAA8B,EAAAxB,QAAAD,EAEA,IAAA9B,KAAAkD,yBAAAvB,KAAAF,KACAzB,KAAAoD,cAAAzB,KAAAF,KAAAzB,KAAAmD,yBAAAxB,KAAAF,GACA,QAGA,IAAAgC,GAAAzD,KAAAqD,mBAAAE,EAAAC,EAAA1B,EAEA,QAAA2B,GAAAzD,KAAAoD,cAAAzB,KAAAF,GACA,QAEAgC,GAGAzD,KAAA0D,mBAAA,SAAAH,EAAAC,EAAA1B,EAAA6B,GACA,GAAAlC,GAAA8B,EAAAxB,QAAAD,EAEA,IAAA9B,KAAAoD,cAAAzB,KAAAF,GACA,MAAAzB,MAAA4D,sBAAAL,EAAA9B,EAAAK,EAEA,IAAAE,GAAAP,EAAAO,MAAAhC,KAAA6C,mBACA,IAAAb,EAAA,CACA,GAAA6B,GAAA7B,EAAA8B,KAEA,IAAA9B,EAAA,GACA,MAAAhC,MAAA+D,oBAAAR,EAAAvB,EAAA,GAAAF,EAAA+B,EAEA,IAAAG,GAAAT,EAAAU,oBAAAnC,EAAA+B,EAAA7B,EAAA,GAAAE,OAAA,EASA,OAPA8B,OAAAE,gBACAP,EACAK,EAAAhE,KAAAmE,gBAAAZ,EAAAzB,GACiB,OAAA0B,IACjBQ,EAAA,OAGAA,EAGA,iBAAAR,EAAA,CAGA,GAAAxB,GAAAP,EAAAO,MAAAhC,KAAAgD,kBACA,IAAAhB,EAAA,CACA,GAAA6B,GAAA7B,EAAA8B,MAAA9B,EAAA,GAAAE,MAEA,OAAAF,GAAA,GACAhC,KAAAoE,oBAAAb,EAAAvB,EAAA,GAAAF,EAAA+B,GAEAN,EAAAU,oBAAAnC,EAAA+B,GAAA,MAIA7D,KAAAmE,gBAAA,SAAAZ,EAAAzB,GACA,GAAAL,GAAA8B,EAAAxB,QAAAD,GACAuC,EAAA5C,EAAA6C,OAAA,MACAC,EAAAzC,EACA0C,EAAA/C,EAAAS,MACAJ,IAAA,CAGA,KAFA,GAAA2C,GAAA3C,EACA4C,EAAAnB,EAAAoB,cACA7C,EAAA4C,GAAA,CACAjD,EAAA8B,EAAAxB,QAAAD,EACA,IAAAO,GAAAZ,EAAA6C,OAAA,KACA,SAAAjC,EAAA,CAEA,GAAAgC,EAAAhC,EACA,KACA,IAAAuC,GAAA5E,KAAA0D,mBAAAH,EAAA,MAAAzB,EAEA,IAAA8C,EAAA,CACA,GAAAA,EAAA1E,MAAA4B,KAAAyC,EACA,KACiB,IAAAK,EAAAV,cACjBpC,EAAA8C,EAAA3B,IAAAnB,QACiB,IAAAuC,GAAAhC,EACjB,MAGAoC,EAAA3C,GAGA,UAAAR,GAAAiD,EAAAC,EAAAC,EAAAlB,EAAAxB,QAAA0C,GAAAvC,SAEAlC,KAAA4D,sBAAA,SAAAL,EAAA9B,EAAAK,GAOA,IANA,GAAA0C,GAAA/C,EAAA6C,OAAA,QACAI,EAAAnB,EAAAoB,YACAJ,EAAAzC,EAEA+C,EAAA,uCACAC,EAAA,IACAhD,EAAA4C,GAAA,CACAjD,EAAA8B,EAAAxB,QAAAD,EACA,IAAAiD,GAAAF,EAAAG,KAAAvD,EACA,IAAAsD,IACAA,EAAA,GAAAD,IACAA,KAEAA,GAAA,MAGA,GAAAL,GAAA3C,CACA,IAAA2C,EAAAF,EACA,UAAAjD,GAAAiD,EAAAC,EAAAC,EAAAhD,EAAAS,UAICM,KAAAG,EAAAF,aAID/C,IAAAC,OAAA,8MAAAC,EAAAH,EAAAD,GACA,YAEA,IAAAK,GAAAD,EAAA,cACAqF,EAAArF,EAAA,UAAAsF,KACAtE,EAAAhB,EAAA,0BAAAgB,mBACAW,EAAA3B,EAAA,4BAAA2B,qBACA4D,EAAAvF,EAAA,sBAAAuF,gBACAC,EAAAxF,EAAA,oBAAA+C,SAEAuC,EAAA,WACAlF,KAAAqF,eAAAzE,EACAZ,KAAAsF,SAAA,GAAA/D,GACAvB,KAAAuF,WAAA,GAAAJ,GACAnF,KAAAwF,aAAA,GAAAJ,GAEAvF,GAAAW,SAAA0E,EAAAD,GAEA,WAEAjF,KAAAyF,iBAAA,KACAzF,KAAA0F,cAAyBxF,MAAA,KAAA+C,IAAA,MAEzBjD,KAAA2F,kBAAA,SAAAC,EAAAnE,EAAAoE,GACA,GAAAxD,GAAArC,KAAAsC,WAAAb,GAEAqE,EAAA9F,KAAA+F,eAAAC,cAAAvE,EAAAmE,GACAK,EAAAH,EAAAG,OACAC,EAAAJ,EAAAF,KAEA,IAAAK,EAAA/D,QAAA,WAAA+D,IAAA/D,OAAA,GAAAiE,KACA,MAAA9D,EAGA,aAAAuD,EAAA,CACA,GAAA5D,GAAAP,EAAAO,MAAA,kBACAA,KACAK,GAAAwD,OAES,iBAAAD,EAAA,CACT,YAAAM,EACA,QAEA,IAAAlE,GAAAP,EAAAO,MAAA,cACAA,KACAA,EAAA,KACAK,GAAA,KAEAA,GAAA,MAIA,MAAAA,IAGArC,KAAAwB,aAAA,SAAAoE,EAAAnE,EAAAC,GACA,MAAA1B,MAAAsF,SAAA9D,aAAAC,EAAAC,IAGA1B,KAAA4B,YAAA,SAAAgE,EAAA/D,EAAAC,GACA9B,KAAAsF,SAAA1D,YAAAC,EAAAC,IAGA9B,KAAAoG,IAAA,iBACC5D,KAAA0C,EAAAzC,WAEDhD,EAAAyF","file":"scad-mode.bundle.js","sourcesContent":["webpackJsonpTexteditor([18],{\n\n/***/ \"./node_modules/brace/mode/scad.js\":\n/***/ (function(module, exports) {\n\nace.define(\"ace/mode/doc_comment_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../lib/oop\");\nvar TextHighlightRules = acequire(\"./text_highlight_rules\").TextHighlightRules;\n\nvar DocCommentHighlightRules = function() {\n    this.$rules = {\n        \"start\" : [ {\n            token : \"comment.doc.tag\",\n            regex : \"@[\\\\w\\\\d_]+\" // TODO: fix email addresses\n        }, \n        DocCommentHighlightRules.getTagRule(),\n        {\n            defaultToken : \"comment.doc\",\n            caseInsensitive: true\n        }]\n    };\n};\n\noop.inherits(DocCommentHighlightRules, TextHighlightRules);\n\nDocCommentHighlightRules.getTagRule = function(start) {\n    return {\n        token : \"comment.doc.tag.storage.type\",\n        regex : \"\\\\b(?:TODO|FIXME|XXX|HACK)\\\\b\"\n    };\n}\n\nDocCommentHighlightRules.getStartRule = function(start) {\n    return {\n        token : \"comment.doc\", // doc comment\n        regex : \"\\\\/\\\\*(?=\\\\*)\",\n        next  : start\n    };\n};\n\nDocCommentHighlightRules.getEndRule = function (start) {\n    return {\n        token : \"comment.doc\", // closing comment\n        regex : \"\\\\*\\\\/\",\n        next  : start\n    };\n};\n\n\nexports.DocCommentHighlightRules = DocCommentHighlightRules;\n\n});\n\nace.define(\"ace/mode/scad_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/lib/lang\",\"ace/mode/doc_comment_highlight_rules\",\"ace/mode/text_highlight_rules\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../lib/oop\");\nvar lang = acequire(\"../lib/lang\");\nvar DocCommentHighlightRules = acequire(\"./doc_comment_highlight_rules\").DocCommentHighlightRules;\nvar TextHighlightRules = acequire(\"./text_highlight_rules\").TextHighlightRules;\n\nvar scadHighlightRules = function() {\n    var keywordMapper = this.createKeywordMapper({\n        \"variable.language\": \"this\",\n        \"keyword\": \"module|if|else|for\",\n        \"constant.language\": \"NULL\"\n    }, \"identifier\");\n\n    this.$rules = {\n        \"start\" : [\n            {\n                token : \"comment\",\n                regex : \"\\\\/\\\\/.*$\"\n            },\n            DocCommentHighlightRules.getStartRule(\"start\"),\n            {\n                token : \"comment\", // multi line comment\n                regex : \"\\\\/\\\\*\",\n                next : \"comment\"\n            }, {\n                token : \"string\", // single line\n                regex : '[\"](?:(?:\\\\\\\\.)|(?:[^\"\\\\\\\\]))*?[\"]'\n            }, {\n                token : \"string\", // multi line string start\n                regex : '[\"].*\\\\\\\\$',\n                next : \"qqstring\"\n            }, {\n                token : \"string\", // single line\n                regex : \"['](?:(?:\\\\\\\\.)|(?:[^'\\\\\\\\]))*?[']\"\n            }, {\n                token : \"string\", // multi line string start\n                regex : \"['].*\\\\\\\\$\",\n                next : \"qstring\"\n            }, {\n                token : \"constant.numeric\", // hex\n                regex : \"0[xX][0-9a-fA-F]+\\\\b\"\n            }, {\n                token : \"constant.numeric\", // float\n                regex : \"[+-]?\\\\d+(?:(?:\\\\.\\\\d*)?(?:[eE][+-]?\\\\d+)?)?\\\\b\"\n            }, {\n              token : \"constant\", // <CONSTANT>\n              regex : \"<[a-zA-Z0-9.]+>\"\n            }, {\n              token : \"keyword\", // pre-compiler directivs\n              regex : \"(?:use|include)\"\n            }, {\n                token : keywordMapper,\n                regex : \"[a-zA-Z_$][a-zA-Z0-9_$]*\\\\b\"\n            }, {\n                token : \"keyword.operator\",\n                regex : \"!|\\\\$|%|&|\\\\*|\\\\-\\\\-|\\\\-|\\\\+\\\\+|\\\\+|~|==|=|!=|<=|>=|<<=|>>=|>>>=|<>|<|>|!|&&|\\\\|\\\\||\\\\?\\\\:|\\\\*=|%=|\\\\+=|\\\\-=|&=|\\\\^=|\\\\b(?:in|new|delete|typeof|void)\"\n            }, {\n                token : \"paren.lparen\",\n                regex : \"[[({]\"\n            }, {\n                token : \"paren.rparen\",\n                regex : \"[\\\\])}]\"\n            }, {\n                token : \"text\",\n                regex : \"\\\\s+\"\n            }\n        ],\n        \"comment\" : [\n            {\n                token : \"comment\", // closing comment\n                regex : \".*?\\\\*\\\\/\",\n                next : \"start\"\n            }, {\n                token : \"comment\", // comment spanning whole line\n                regex : \".+\"\n            }\n        ],\n        \"qqstring\" : [\n            {\n                token : \"string\",\n                regex : '(?:(?:\\\\\\\\.)|(?:[^\"\\\\\\\\]))*?\"',\n                next : \"start\"\n            }, {\n                token : \"string\",\n                regex : '.+'\n            }\n        ],\n        \"qstring\" : [\n            {\n                token : \"string\",\n                regex : \"(?:(?:\\\\\\\\.)|(?:[^'\\\\\\\\]))*?'\",\n                next : \"start\"\n            }, {\n                token : \"string\",\n                regex : '.+'\n            }\n        ]\n    };\n    \n    this.embedRules(DocCommentHighlightRules, \"doc-\",\n        [ DocCommentHighlightRules.getEndRule(\"start\") ]);\n};\n\noop.inherits(scadHighlightRules, TextHighlightRules);\n\nexports.scadHighlightRules = scadHighlightRules;\n});\n\nace.define(\"ace/mode/matching_brace_outdent\",[\"require\",\"exports\",\"module\",\"ace/range\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar Range = acequire(\"../range\").Range;\n\nvar MatchingBraceOutdent = function() {};\n\n(function() {\n\n    this.checkOutdent = function(line, input) {\n        if (! /^\\s+$/.test(line))\n            return false;\n\n        return /^\\s*\\}/.test(input);\n    };\n\n    this.autoOutdent = function(doc, row) {\n        var line = doc.getLine(row);\n        var match = line.match(/^(\\s*\\})/);\n\n        if (!match) return 0;\n\n        var column = match[1].length;\n        var openBracePos = doc.findMatchingBracket({row: row, column: column});\n\n        if (!openBracePos || openBracePos.row == row) return 0;\n\n        var indent = this.$getIndent(doc.getLine(openBracePos.row));\n        doc.replace(new Range(row, 0, row, column-1), indent);\n    };\n\n    this.$getIndent = function(line) {\n        return line.match(/^\\s*/)[0];\n    };\n\n}).call(MatchingBraceOutdent.prototype);\n\nexports.MatchingBraceOutdent = MatchingBraceOutdent;\n});\n\nace.define(\"ace/mode/folding/cstyle\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/range\",\"ace/mode/folding/fold_mode\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../../lib/oop\");\nvar Range = acequire(\"../../range\").Range;\nvar BaseFoldMode = acequire(\"./fold_mode\").FoldMode;\n\nvar FoldMode = exports.FoldMode = function(commentRegex) {\n    if (commentRegex) {\n        this.foldingStartMarker = new RegExp(\n            this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start)\n        );\n        this.foldingStopMarker = new RegExp(\n            this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end)\n        );\n    }\n};\noop.inherits(FoldMode, BaseFoldMode);\n\n(function() {\n    \n    this.foldingStartMarker = /(\\{|\\[)[^\\}\\]]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{]*(\\}|\\])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe= /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n    this.getFoldWidget = function(session, foldStyle, row) {\n        var line = session.getLine(row);\n    \n        if (this.singleLineBlockCommentRe.test(line)) {\n            if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line))\n                return \"\";\n        }\n    \n        var fw = this._getFoldWidgetBase(session, foldStyle, row);\n    \n        if (!fw && this.startRegionRe.test(line))\n            return \"start\"; // lineCommentRegionStart\n    \n        return fw;\n    };\n\n    this.getFoldWidgetRange = function(session, foldStyle, row, forceMultiline) {\n        var line = session.getLine(row);\n        \n        if (this.startRegionRe.test(line))\n            return this.getCommentRegionBlock(session, line, row);\n        \n        var match = line.match(this.foldingStartMarker);\n        if (match) {\n            var i = match.index;\n\n            if (match[1])\n                return this.openingBracketBlock(session, match[1], row, i);\n                \n            var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n            \n            if (range && !range.isMultiLine()) {\n                if (forceMultiline) {\n                    range = this.getSectionRange(session, row);\n                } else if (foldStyle != \"all\")\n                    range = null;\n            }\n            \n            return range;\n        }\n\n        if (foldStyle === \"markbegin\")\n            return;\n\n        var match = line.match(this.foldingStopMarker);\n        if (match) {\n            var i = match.index + match[0].length;\n\n            if (match[1])\n                return this.closingBracketBlock(session, match[1], row, i);\n\n            return session.getCommentFoldRange(row, i, -1);\n        }\n    };\n    \n    this.getSectionRange = function(session, row) {\n        var line = session.getLine(row);\n        var startIndent = line.search(/\\S/);\n        var startRow = row;\n        var startColumn = line.length;\n        row = row + 1;\n        var endRow = row;\n        var maxRow = session.getLength();\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var indent = line.search(/\\S/);\n            if (indent === -1)\n                continue;\n            if  (startIndent > indent)\n                break;\n            var subRange = this.getFoldWidgetRange(session, \"all\", row);\n            \n            if (subRange) {\n                if (subRange.start.row <= startRow) {\n                    break;\n                } else if (subRange.isMultiLine()) {\n                    row = subRange.end.row;\n                } else if (startIndent == indent) {\n                    break;\n                }\n            }\n            endRow = row;\n        }\n        \n        return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    this.getCommentRegionBlock = function(session, line, row) {\n        var startColumn = line.search(/\\s*$/);\n        var maxRow = session.getLength();\n        var startRow = row;\n        \n        var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n        var depth = 1;\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var m = re.exec(line);\n            if (!m) continue;\n            if (m[1]) depth--;\n            else depth++;\n\n            if (!depth) break;\n        }\n\n        var endRow = row;\n        if (endRow > startRow) {\n            return new Range(startRow, startColumn, endRow, line.length);\n        }\n    };\n\n}).call(FoldMode.prototype);\n\n});\n\nace.define(\"ace/mode/scad\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/scad_highlight_rules\",\"ace/mode/matching_brace_outdent\",\"ace/mode/behaviour/cstyle\",\"ace/mode/folding/cstyle\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../lib/oop\");\nvar TextMode = acequire(\"./text\").Mode;\nvar scadHighlightRules = acequire(\"./scad_highlight_rules\").scadHighlightRules;\nvar MatchingBraceOutdent = acequire(\"./matching_brace_outdent\").MatchingBraceOutdent;\nvar CstyleBehaviour = acequire(\"./behaviour/cstyle\").CstyleBehaviour;\nvar CStyleFoldMode = acequire(\"./folding/cstyle\").FoldMode;\n\nvar Mode = function() {\n    this.HighlightRules = scadHighlightRules;\n    this.$outdent = new MatchingBraceOutdent();\n    this.$behaviour = new CstyleBehaviour();\n    this.foldingRules = new CStyleFoldMode();\n};\noop.inherits(Mode, TextMode);\n\n(function() {\n\n    this.lineCommentStart = \"//\";\n    this.blockComment = {start: \"/*\", end: \"*/\"};\n\n    this.getNextLineIndent = function(state, line, tab) {\n        var indent = this.$getIndent(line);\n\n        var tokenizedLine = this.getTokenizer().getLineTokens(line, state);\n        var tokens = tokenizedLine.tokens;\n        var endState = tokenizedLine.state;\n\n        if (tokens.length && tokens[tokens.length-1].type == \"comment\") {\n            return indent;\n        }\n\n        if (state == \"start\") {\n            var match = line.match(/^.*[\\{\\(\\[]\\s*$/);\n            if (match) {\n                indent += tab;\n            }\n        } else if (state == \"doc-start\") {\n            if (endState == \"start\") {\n                return \"\";\n            }\n            var match = line.match(/^\\s*(\\/?)\\*/);\n            if (match) {\n                if (match[1]) {\n                    indent += \" \";\n                }\n                indent += \"* \";\n            }\n        }\n\n        return indent;\n    };\n\n    this.checkOutdent = function(state, line, input) {\n        return this.$outdent.checkOutdent(line, input);\n    };\n\n    this.autoOutdent = function(state, doc, row) {\n        this.$outdent.autoOutdent(doc, row);\n    };\n\n    this.$id = \"ace/mode/scad\";\n}).call(Mode.prototype);\n\nexports.Mode = Mode;\n});\n\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// scad-mode.bundle.js","ace.define(\"ace/mode/doc_comment_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../lib/oop\");\nvar TextHighlightRules = acequire(\"./text_highlight_rules\").TextHighlightRules;\n\nvar DocCommentHighlightRules = function() {\n    this.$rules = {\n        \"start\" : [ {\n            token : \"comment.doc.tag\",\n            regex : \"@[\\\\w\\\\d_]+\" // TODO: fix email addresses\n        }, \n        DocCommentHighlightRules.getTagRule(),\n        {\n            defaultToken : \"comment.doc\",\n            caseInsensitive: true\n        }]\n    };\n};\n\noop.inherits(DocCommentHighlightRules, TextHighlightRules);\n\nDocCommentHighlightRules.getTagRule = function(start) {\n    return {\n        token : \"comment.doc.tag.storage.type\",\n        regex : \"\\\\b(?:TODO|FIXME|XXX|HACK)\\\\b\"\n    };\n}\n\nDocCommentHighlightRules.getStartRule = function(start) {\n    return {\n        token : \"comment.doc\", // doc comment\n        regex : \"\\\\/\\\\*(?=\\\\*)\",\n        next  : start\n    };\n};\n\nDocCommentHighlightRules.getEndRule = function (start) {\n    return {\n        token : \"comment.doc\", // closing comment\n        regex : \"\\\\*\\\\/\",\n        next  : start\n    };\n};\n\n\nexports.DocCommentHighlightRules = DocCommentHighlightRules;\n\n});\n\nace.define(\"ace/mode/scad_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/lib/lang\",\"ace/mode/doc_comment_highlight_rules\",\"ace/mode/text_highlight_rules\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../lib/oop\");\nvar lang = acequire(\"../lib/lang\");\nvar DocCommentHighlightRules = acequire(\"./doc_comment_highlight_rules\").DocCommentHighlightRules;\nvar TextHighlightRules = acequire(\"./text_highlight_rules\").TextHighlightRules;\n\nvar scadHighlightRules = function() {\n    var keywordMapper = this.createKeywordMapper({\n        \"variable.language\": \"this\",\n        \"keyword\": \"module|if|else|for\",\n        \"constant.language\": \"NULL\"\n    }, \"identifier\");\n\n    this.$rules = {\n        \"start\" : [\n            {\n                token : \"comment\",\n                regex : \"\\\\/\\\\/.*$\"\n            },\n            DocCommentHighlightRules.getStartRule(\"start\"),\n            {\n                token : \"comment\", // multi line comment\n                regex : \"\\\\/\\\\*\",\n                next : \"comment\"\n            }, {\n                token : \"string\", // single line\n                regex : '[\"](?:(?:\\\\\\\\.)|(?:[^\"\\\\\\\\]))*?[\"]'\n            }, {\n                token : \"string\", // multi line string start\n                regex : '[\"].*\\\\\\\\$',\n                next : \"qqstring\"\n            }, {\n                token : \"string\", // single line\n                regex : \"['](?:(?:\\\\\\\\.)|(?:[^'\\\\\\\\]))*?[']\"\n            }, {\n                token : \"string\", // multi line string start\n                regex : \"['].*\\\\\\\\$\",\n                next : \"qstring\"\n            }, {\n                token : \"constant.numeric\", // hex\n                regex : \"0[xX][0-9a-fA-F]+\\\\b\"\n            }, {\n                token : \"constant.numeric\", // float\n                regex : \"[+-]?\\\\d+(?:(?:\\\\.\\\\d*)?(?:[eE][+-]?\\\\d+)?)?\\\\b\"\n            }, {\n              token : \"constant\", // <CONSTANT>\n              regex : \"<[a-zA-Z0-9.]+>\"\n            }, {\n              token : \"keyword\", // pre-compiler directivs\n              regex : \"(?:use|include)\"\n            }, {\n                token : keywordMapper,\n                regex : \"[a-zA-Z_$][a-zA-Z0-9_$]*\\\\b\"\n            }, {\n                token : \"keyword.operator\",\n                regex : \"!|\\\\$|%|&|\\\\*|\\\\-\\\\-|\\\\-|\\\\+\\\\+|\\\\+|~|==|=|!=|<=|>=|<<=|>>=|>>>=|<>|<|>|!|&&|\\\\|\\\\||\\\\?\\\\:|\\\\*=|%=|\\\\+=|\\\\-=|&=|\\\\^=|\\\\b(?:in|new|delete|typeof|void)\"\n            }, {\n                token : \"paren.lparen\",\n                regex : \"[[({]\"\n            }, {\n                token : \"paren.rparen\",\n                regex : \"[\\\\])}]\"\n            }, {\n                token : \"text\",\n                regex : \"\\\\s+\"\n            }\n        ],\n        \"comment\" : [\n            {\n                token : \"comment\", // closing comment\n                regex : \".*?\\\\*\\\\/\",\n                next : \"start\"\n            }, {\n                token : \"comment\", // comment spanning whole line\n                regex : \".+\"\n            }\n        ],\n        \"qqstring\" : [\n            {\n                token : \"string\",\n                regex : '(?:(?:\\\\\\\\.)|(?:[^\"\\\\\\\\]))*?\"',\n                next : \"start\"\n            }, {\n                token : \"string\",\n                regex : '.+'\n            }\n        ],\n        \"qstring\" : [\n            {\n                token : \"string\",\n                regex : \"(?:(?:\\\\\\\\.)|(?:[^'\\\\\\\\]))*?'\",\n                next : \"start\"\n            }, {\n                token : \"string\",\n                regex : '.+'\n            }\n        ]\n    };\n    \n    this.embedRules(DocCommentHighlightRules, \"doc-\",\n        [ DocCommentHighlightRules.getEndRule(\"start\") ]);\n};\n\noop.inherits(scadHighlightRules, TextHighlightRules);\n\nexports.scadHighlightRules = scadHighlightRules;\n});\n\nace.define(\"ace/mode/matching_brace_outdent\",[\"require\",\"exports\",\"module\",\"ace/range\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar Range = acequire(\"../range\").Range;\n\nvar MatchingBraceOutdent = function() {};\n\n(function() {\n\n    this.checkOutdent = function(line, input) {\n        if (! /^\\s+$/.test(line))\n            return false;\n\n        return /^\\s*\\}/.test(input);\n    };\n\n    this.autoOutdent = function(doc, row) {\n        var line = doc.getLine(row);\n        var match = line.match(/^(\\s*\\})/);\n\n        if (!match) return 0;\n\n        var column = match[1].length;\n        var openBracePos = doc.findMatchingBracket({row: row, column: column});\n\n        if (!openBracePos || openBracePos.row == row) return 0;\n\n        var indent = this.$getIndent(doc.getLine(openBracePos.row));\n        doc.replace(new Range(row, 0, row, column-1), indent);\n    };\n\n    this.$getIndent = function(line) {\n        return line.match(/^\\s*/)[0];\n    };\n\n}).call(MatchingBraceOutdent.prototype);\n\nexports.MatchingBraceOutdent = MatchingBraceOutdent;\n});\n\nace.define(\"ace/mode/folding/cstyle\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/range\",\"ace/mode/folding/fold_mode\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../../lib/oop\");\nvar Range = acequire(\"../../range\").Range;\nvar BaseFoldMode = acequire(\"./fold_mode\").FoldMode;\n\nvar FoldMode = exports.FoldMode = function(commentRegex) {\n    if (commentRegex) {\n        this.foldingStartMarker = new RegExp(\n            this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start)\n        );\n        this.foldingStopMarker = new RegExp(\n            this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end)\n        );\n    }\n};\noop.inherits(FoldMode, BaseFoldMode);\n\n(function() {\n    \n    this.foldingStartMarker = /(\\{|\\[)[^\\}\\]]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{]*(\\}|\\])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe= /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n    this.getFoldWidget = function(session, foldStyle, row) {\n        var line = session.getLine(row);\n    \n        if (this.singleLineBlockCommentRe.test(line)) {\n            if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line))\n                return \"\";\n        }\n    \n        var fw = this._getFoldWidgetBase(session, foldStyle, row);\n    \n        if (!fw && this.startRegionRe.test(line))\n            return \"start\"; // lineCommentRegionStart\n    \n        return fw;\n    };\n\n    this.getFoldWidgetRange = function(session, foldStyle, row, forceMultiline) {\n        var line = session.getLine(row);\n        \n        if (this.startRegionRe.test(line))\n            return this.getCommentRegionBlock(session, line, row);\n        \n        var match = line.match(this.foldingStartMarker);\n        if (match) {\n            var i = match.index;\n\n            if (match[1])\n                return this.openingBracketBlock(session, match[1], row, i);\n                \n            var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n            \n            if (range && !range.isMultiLine()) {\n                if (forceMultiline) {\n                    range = this.getSectionRange(session, row);\n                } else if (foldStyle != \"all\")\n                    range = null;\n            }\n            \n            return range;\n        }\n\n        if (foldStyle === \"markbegin\")\n            return;\n\n        var match = line.match(this.foldingStopMarker);\n        if (match) {\n            var i = match.index + match[0].length;\n\n            if (match[1])\n                return this.closingBracketBlock(session, match[1], row, i);\n\n            return session.getCommentFoldRange(row, i, -1);\n        }\n    };\n    \n    this.getSectionRange = function(session, row) {\n        var line = session.getLine(row);\n        var startIndent = line.search(/\\S/);\n        var startRow = row;\n        var startColumn = line.length;\n        row = row + 1;\n        var endRow = row;\n        var maxRow = session.getLength();\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var indent = line.search(/\\S/);\n            if (indent === -1)\n                continue;\n            if  (startIndent > indent)\n                break;\n            var subRange = this.getFoldWidgetRange(session, \"all\", row);\n            \n            if (subRange) {\n                if (subRange.start.row <= startRow) {\n                    break;\n                } else if (subRange.isMultiLine()) {\n                    row = subRange.end.row;\n                } else if (startIndent == indent) {\n                    break;\n                }\n            }\n            endRow = row;\n        }\n        \n        return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    this.getCommentRegionBlock = function(session, line, row) {\n        var startColumn = line.search(/\\s*$/);\n        var maxRow = session.getLength();\n        var startRow = row;\n        \n        var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n        var depth = 1;\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var m = re.exec(line);\n            if (!m) continue;\n            if (m[1]) depth--;\n            else depth++;\n\n            if (!depth) break;\n        }\n\n        var endRow = row;\n        if (endRow > startRow) {\n            return new Range(startRow, startColumn, endRow, line.length);\n        }\n    };\n\n}).call(FoldMode.prototype);\n\n});\n\nace.define(\"ace/mode/scad\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/scad_highlight_rules\",\"ace/mode/matching_brace_outdent\",\"ace/mode/behaviour/cstyle\",\"ace/mode/folding/cstyle\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../lib/oop\");\nvar TextMode = acequire(\"./text\").Mode;\nvar scadHighlightRules = acequire(\"./scad_highlight_rules\").scadHighlightRules;\nvar MatchingBraceOutdent = acequire(\"./matching_brace_outdent\").MatchingBraceOutdent;\nvar CstyleBehaviour = acequire(\"./behaviour/cstyle\").CstyleBehaviour;\nvar CStyleFoldMode = acequire(\"./folding/cstyle\").FoldMode;\n\nvar Mode = function() {\n    this.HighlightRules = scadHighlightRules;\n    this.$outdent = new MatchingBraceOutdent();\n    this.$behaviour = new CstyleBehaviour();\n    this.foldingRules = new CStyleFoldMode();\n};\noop.inherits(Mode, TextMode);\n\n(function() {\n\n    this.lineCommentStart = \"//\";\n    this.blockComment = {start: \"/*\", end: \"*/\"};\n\n    this.getNextLineIndent = function(state, line, tab) {\n        var indent = this.$getIndent(line);\n\n        var tokenizedLine = this.getTokenizer().getLineTokens(line, state);\n        var tokens = tokenizedLine.tokens;\n        var endState = tokenizedLine.state;\n\n        if (tokens.length && tokens[tokens.length-1].type == \"comment\") {\n            return indent;\n        }\n\n        if (state == \"start\") {\n            var match = line.match(/^.*[\\{\\(\\[]\\s*$/);\n            if (match) {\n                indent += tab;\n            }\n        } else if (state == \"doc-start\") {\n            if (endState == \"start\") {\n                return \"\";\n            }\n            var match = line.match(/^\\s*(\\/?)\\*/);\n            if (match) {\n                if (match[1]) {\n                    indent += \" \";\n                }\n                indent += \"* \";\n            }\n        }\n\n        return indent;\n    };\n\n    this.checkOutdent = function(state, line, input) {\n        return this.$outdent.checkOutdent(line, input);\n    };\n\n    this.autoOutdent = function(state, doc, row) {\n        this.$outdent.autoOutdent(doc, row);\n    };\n\n    this.$id = \"ace/mode/scad\";\n}).call(Mode.prototype);\n\nexports.Mode = Mode;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/brace/mode/scad.js\n// module id = ./node_modules/brace/mode/scad.js\n// module chunks = 18"],"sourceRoot":""}