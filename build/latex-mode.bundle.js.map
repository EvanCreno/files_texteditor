{"version":3,"sources":["webpack:///latex-mode.bundle.js","webpack:///./node_modules/brace/mode/latex.js"],"names":["webpackJsonp","./node_modules/brace/mode/latex.js","module","exports","ace","define","acequire","oop","TextHighlightRules","LatexHighlightRules","this","$rules","start","token","regex","next","equation","defaultToken","inherits","BaseFoldMode","FoldMode","Range","TokenIterator","foldingStartMarker","foldingStopMarker","getFoldWidgetRange","session","foldStyle","row","line","doc","getLine","match","exec","latexBlock","length","latexSection","openingBracketBlock","index","closingBracketBlock","column","keywords","\\begin","\\end","stream","getCurrentToken","type","val","value","dir","getType","stepForward","stepBackward","stack","startColumn","getCurrentTokenColumn","startRow","step","level","unshift","shift","getCurrentTokenRow","startLevel","indexOf","stackDepth","endRow","test","call","prototype","TextMode","Mode","LatexFoldMode","HighlightRules","foldingRules","$behaviour","$defaultBehaviour","lineCommentStart","$id"],"mappings":"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","file":"latex-mode.bundle.js","sourcesContent":["webpackJsonp([25],{\n\n/***/ \"./node_modules/brace/mode/latex.js\":\n/***/ (function(module, exports) {\n\nace.define(\"ace/mode/latex_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../lib/oop\");\nvar TextHighlightRules = acequire(\"./text_highlight_rules\").TextHighlightRules;\n\nvar LatexHighlightRules = function() {  \n\n    this.$rules = {\n        \"start\" : [{\n            token : \"comment\",\n            regex : \"%.*$\"\n        }, {\n            token : [\"keyword\", \"lparen\", \"variable.parameter\", \"rparen\", \"lparen\", \"storage.type\", \"rparen\"],\n            regex : \"(\\\\\\\\(?:documentclass|usepackage|input))(?:(\\\\[)([^\\\\]]*)(\\\\]))?({)([^}]*)(})\"\n        }, {\n            token : [\"keyword\",\"lparen\", \"variable.parameter\", \"rparen\"],\n            regex : \"(\\\\\\\\(?:label|v?ref|cite(?:[^{]*)))(?:({)([^}]*)(}))?\"\n        }, {\n            token : [\"storage.type\", \"lparen\", \"variable.parameter\", \"rparen\"],\n            regex : \"(\\\\\\\\(?:begin|end))({)(\\\\w*)(})\"\n        }, {\n            token : \"storage.type\",\n            regex : \"\\\\\\\\[a-zA-Z]+\"\n        }, {\n            token : \"lparen\",\n            regex : \"[[({]\"\n        }, {\n            token : \"rparen\",\n            regex : \"[\\\\])}]\"\n        }, {\n            token : \"constant.character.escape\",\n            regex : \"\\\\\\\\[^a-zA-Z]?\"\n        }, {\n            token : \"string\",\n            regex : \"\\\\${1,2}\",\n            next  : \"equation\"\n        }],\n        \"equation\" : [{\n            token : \"comment\",\n            regex : \"%.*$\"\n        }, {\n            token : \"string\",\n            regex : \"\\\\${1,2}\",\n            next  : \"start\"\n        }, {\n            token : \"constant.character.escape\",\n            regex : \"\\\\\\\\(?:[^a-zA-Z]|[a-zA-Z]+)\"\n        }, {\n            token : \"error\", \n            regex : \"^\\\\s*$\", \n            next : \"start\" \n        }, {\n            defaultToken : \"string\"\n        }]\n\n    };\n};\noop.inherits(LatexHighlightRules, TextHighlightRules);\n\nexports.LatexHighlightRules = LatexHighlightRules;\n\n});\n\nace.define(\"ace/mode/folding/latex\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/folding/fold_mode\",\"ace/range\",\"ace/token_iterator\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../../lib/oop\");\nvar BaseFoldMode = acequire(\"./fold_mode\").FoldMode;\nvar Range = acequire(\"../../range\").Range;\nvar TokenIterator = acequire(\"../../token_iterator\").TokenIterator;\n\nvar FoldMode = exports.FoldMode = function() {};\n\noop.inherits(FoldMode, BaseFoldMode);\n\n(function() {\n\n    this.foldingStartMarker = /^\\s*\\\\(begin)|(section|subsection|paragraph)\\b|{\\s*$/;\n    this.foldingStopMarker = /^\\s*\\\\(end)\\b|^\\s*}/;\n\n    this.getFoldWidgetRange = function(session, foldStyle, row) {\n        var line = session.doc.getLine(row);\n        var match = this.foldingStartMarker.exec(line);\n        if (match) {\n            if (match[1])\n                return this.latexBlock(session, row, match[0].length - 1);\n            if (match[2])\n                return this.latexSection(session, row, match[0].length - 1);\n\n            return this.openingBracketBlock(session, \"{\", row, match.index);\n        }\n\n        var match = this.foldingStopMarker.exec(line);\n        if (match) {\n            if (match[1])\n                return this.latexBlock(session, row, match[0].length - 1);\n\n            return this.closingBracketBlock(session, \"}\", row, match.index + match[0].length);\n        }\n    };\n\n    this.latexBlock = function(session, row, column) {\n        var keywords = {\n            \"\\\\begin\": 1,\n            \"\\\\end\": -1\n        };\n\n        var stream = new TokenIterator(session, row, column);\n        var token = stream.getCurrentToken();\n        if (!token || !(token.type == \"storage.type\" || token.type == \"constant.character.escape\"))\n            return;\n\n        var val = token.value;\n        var dir = keywords[val];\n\n        var getType = function() {\n            var token = stream.stepForward();\n            var type = token.type == \"lparen\" ?stream.stepForward().value : \"\";\n            if (dir === -1) {\n                stream.stepBackward();\n                if (type)\n                    stream.stepBackward();\n            }\n            return type;\n        };\n        var stack = [getType()];\n        var startColumn = dir === -1 ? stream.getCurrentTokenColumn() : session.getLine(row).length;\n        var startRow = row;\n\n        stream.step = dir === -1 ? stream.stepBackward : stream.stepForward;\n        while(token = stream.step()) {\n            if (!token || !(token.type == \"storage.type\" || token.type == \"constant.character.escape\"))\n                continue;\n            var level = keywords[token.value];\n            if (!level)\n                continue;\n            var type = getType();\n            if (level === dir)\n                stack.unshift(type);\n            else if (stack.shift() !== type || !stack.length)\n                break;\n        }\n\n        if (stack.length)\n            return;\n\n        var row = stream.getCurrentTokenRow();\n        if (dir === -1)\n            return new Range(row, session.getLine(row).length, startRow, startColumn);\n        stream.stepBackward();\n        return new Range(startRow, startColumn, row, stream.getCurrentTokenColumn());\n    };\n\n    this.latexSection = function(session, row, column) {\n        var keywords = [\"\\\\subsection\", \"\\\\section\", \"\\\\begin\", \"\\\\end\", \"\\\\paragraph\"];\n\n        var stream = new TokenIterator(session, row, column);\n        var token = stream.getCurrentToken();\n        if (!token || token.type != \"storage.type\")\n            return;\n\n        var startLevel = keywords.indexOf(token.value);\n        var stackDepth = 0\n        var endRow = row;\n\n        while(token = stream.stepForward()) {\n            if (token.type !== \"storage.type\")\n                continue;\n            var level = keywords.indexOf(token.value);\n\n            if (level >= 2) {\n                if (!stackDepth)\n                    endRow = stream.getCurrentTokenRow() - 1;\n                stackDepth += level == 2 ? 1 : - 1;\n                if (stackDepth < 0)\n                    break\n            } else if (level >= startLevel)\n                break;\n        }\n\n        if (!stackDepth)\n            endRow = stream.getCurrentTokenRow() - 1;\n\n        while (endRow > row && !/\\S/.test(session.getLine(endRow)))\n            endRow--;\n\n        return new Range(\n            row, session.getLine(row).length,\n            endRow, session.getLine(endRow).length\n        );\n    };\n\n}).call(FoldMode.prototype);\n\n});\n\nace.define(\"ace/mode/latex\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/latex_highlight_rules\",\"ace/mode/folding/latex\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../lib/oop\");\nvar TextMode = acequire(\"./text\").Mode;\nvar LatexHighlightRules = acequire(\"./latex_highlight_rules\").LatexHighlightRules;\nvar LatexFoldMode = acequire(\"./folding/latex\").FoldMode;\n\nvar Mode = function() {\n    this.HighlightRules = LatexHighlightRules;\n    this.foldingRules = new LatexFoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n};\noop.inherits(Mode, TextMode);\n\n(function() {\n    this.type = \"text\";\n    \n    this.lineCommentStart = \"%\";\n\n    this.$id = \"ace/mode/latex\";\n}).call(Mode.prototype);\n\nexports.Mode = Mode;\n\n});\n\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// latex-mode.bundle.js","ace.define(\"ace/mode/latex_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../lib/oop\");\nvar TextHighlightRules = acequire(\"./text_highlight_rules\").TextHighlightRules;\n\nvar LatexHighlightRules = function() {  \n\n    this.$rules = {\n        \"start\" : [{\n            token : \"comment\",\n            regex : \"%.*$\"\n        }, {\n            token : [\"keyword\", \"lparen\", \"variable.parameter\", \"rparen\", \"lparen\", \"storage.type\", \"rparen\"],\n            regex : \"(\\\\\\\\(?:documentclass|usepackage|input))(?:(\\\\[)([^\\\\]]*)(\\\\]))?({)([^}]*)(})\"\n        }, {\n            token : [\"keyword\",\"lparen\", \"variable.parameter\", \"rparen\"],\n            regex : \"(\\\\\\\\(?:label|v?ref|cite(?:[^{]*)))(?:({)([^}]*)(}))?\"\n        }, {\n            token : [\"storage.type\", \"lparen\", \"variable.parameter\", \"rparen\"],\n            regex : \"(\\\\\\\\(?:begin|end))({)(\\\\w*)(})\"\n        }, {\n            token : \"storage.type\",\n            regex : \"\\\\\\\\[a-zA-Z]+\"\n        }, {\n            token : \"lparen\",\n            regex : \"[[({]\"\n        }, {\n            token : \"rparen\",\n            regex : \"[\\\\])}]\"\n        }, {\n            token : \"constant.character.escape\",\n            regex : \"\\\\\\\\[^a-zA-Z]?\"\n        }, {\n            token : \"string\",\n            regex : \"\\\\${1,2}\",\n            next  : \"equation\"\n        }],\n        \"equation\" : [{\n            token : \"comment\",\n            regex : \"%.*$\"\n        }, {\n            token : \"string\",\n            regex : \"\\\\${1,2}\",\n            next  : \"start\"\n        }, {\n            token : \"constant.character.escape\",\n            regex : \"\\\\\\\\(?:[^a-zA-Z]|[a-zA-Z]+)\"\n        }, {\n            token : \"error\", \n            regex : \"^\\\\s*$\", \n            next : \"start\" \n        }, {\n            defaultToken : \"string\"\n        }]\n\n    };\n};\noop.inherits(LatexHighlightRules, TextHighlightRules);\n\nexports.LatexHighlightRules = LatexHighlightRules;\n\n});\n\nace.define(\"ace/mode/folding/latex\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/folding/fold_mode\",\"ace/range\",\"ace/token_iterator\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../../lib/oop\");\nvar BaseFoldMode = acequire(\"./fold_mode\").FoldMode;\nvar Range = acequire(\"../../range\").Range;\nvar TokenIterator = acequire(\"../../token_iterator\").TokenIterator;\n\nvar FoldMode = exports.FoldMode = function() {};\n\noop.inherits(FoldMode, BaseFoldMode);\n\n(function() {\n\n    this.foldingStartMarker = /^\\s*\\\\(begin)|(section|subsection|paragraph)\\b|{\\s*$/;\n    this.foldingStopMarker = /^\\s*\\\\(end)\\b|^\\s*}/;\n\n    this.getFoldWidgetRange = function(session, foldStyle, row) {\n        var line = session.doc.getLine(row);\n        var match = this.foldingStartMarker.exec(line);\n        if (match) {\n            if (match[1])\n                return this.latexBlock(session, row, match[0].length - 1);\n            if (match[2])\n                return this.latexSection(session, row, match[0].length - 1);\n\n            return this.openingBracketBlock(session, \"{\", row, match.index);\n        }\n\n        var match = this.foldingStopMarker.exec(line);\n        if (match) {\n            if (match[1])\n                return this.latexBlock(session, row, match[0].length - 1);\n\n            return this.closingBracketBlock(session, \"}\", row, match.index + match[0].length);\n        }\n    };\n\n    this.latexBlock = function(session, row, column) {\n        var keywords = {\n            \"\\\\begin\": 1,\n            \"\\\\end\": -1\n        };\n\n        var stream = new TokenIterator(session, row, column);\n        var token = stream.getCurrentToken();\n        if (!token || !(token.type == \"storage.type\" || token.type == \"constant.character.escape\"))\n            return;\n\n        var val = token.value;\n        var dir = keywords[val];\n\n        var getType = function() {\n            var token = stream.stepForward();\n            var type = token.type == \"lparen\" ?stream.stepForward().value : \"\";\n            if (dir === -1) {\n                stream.stepBackward();\n                if (type)\n                    stream.stepBackward();\n            }\n            return type;\n        };\n        var stack = [getType()];\n        var startColumn = dir === -1 ? stream.getCurrentTokenColumn() : session.getLine(row).length;\n        var startRow = row;\n\n        stream.step = dir === -1 ? stream.stepBackward : stream.stepForward;\n        while(token = stream.step()) {\n            if (!token || !(token.type == \"storage.type\" || token.type == \"constant.character.escape\"))\n                continue;\n            var level = keywords[token.value];\n            if (!level)\n                continue;\n            var type = getType();\n            if (level === dir)\n                stack.unshift(type);\n            else if (stack.shift() !== type || !stack.length)\n                break;\n        }\n\n        if (stack.length)\n            return;\n\n        var row = stream.getCurrentTokenRow();\n        if (dir === -1)\n            return new Range(row, session.getLine(row).length, startRow, startColumn);\n        stream.stepBackward();\n        return new Range(startRow, startColumn, row, stream.getCurrentTokenColumn());\n    };\n\n    this.latexSection = function(session, row, column) {\n        var keywords = [\"\\\\subsection\", \"\\\\section\", \"\\\\begin\", \"\\\\end\", \"\\\\paragraph\"];\n\n        var stream = new TokenIterator(session, row, column);\n        var token = stream.getCurrentToken();\n        if (!token || token.type != \"storage.type\")\n            return;\n\n        var startLevel = keywords.indexOf(token.value);\n        var stackDepth = 0\n        var endRow = row;\n\n        while(token = stream.stepForward()) {\n            if (token.type !== \"storage.type\")\n                continue;\n            var level = keywords.indexOf(token.value);\n\n            if (level >= 2) {\n                if (!stackDepth)\n                    endRow = stream.getCurrentTokenRow() - 1;\n                stackDepth += level == 2 ? 1 : - 1;\n                if (stackDepth < 0)\n                    break\n            } else if (level >= startLevel)\n                break;\n        }\n\n        if (!stackDepth)\n            endRow = stream.getCurrentTokenRow() - 1;\n\n        while (endRow > row && !/\\S/.test(session.getLine(endRow)))\n            endRow--;\n\n        return new Range(\n            row, session.getLine(row).length,\n            endRow, session.getLine(endRow).length\n        );\n    };\n\n}).call(FoldMode.prototype);\n\n});\n\nace.define(\"ace/mode/latex\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/latex_highlight_rules\",\"ace/mode/folding/latex\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../lib/oop\");\nvar TextMode = acequire(\"./text\").Mode;\nvar LatexHighlightRules = acequire(\"./latex_highlight_rules\").LatexHighlightRules;\nvar LatexFoldMode = acequire(\"./folding/latex\").FoldMode;\n\nvar Mode = function() {\n    this.HighlightRules = LatexHighlightRules;\n    this.foldingRules = new LatexFoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n};\noop.inherits(Mode, TextMode);\n\n(function() {\n    this.type = \"text\";\n    \n    this.lineCommentStart = \"%\";\n\n    this.$id = \"ace/mode/latex\";\n}).call(Mode.prototype);\n\nexports.Mode = Mode;\n\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/brace/mode/latex.js\n// module id = ./node_modules/brace/mode/latex.js\n// module chunks = 25"],"sourceRoot":""}